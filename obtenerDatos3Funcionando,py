import os
import json
import requests
from dotenv import load_dotenv

# Carga las variables de entorno desde el archivo .env
load_dotenv()

# Recupera las credenciales desde las variables de entorno
pinata_api_key = os.getenv("API_KEY")
pinata_secret_api_key = os.getenv("API_SECRET")
json_cid = os.getenv("CID_DEL_JSON")
folder_cid =os.getenv("CID_DE_IMAGENES")
# URL del JSON en Pinata (reemplaza con tu propio CID)


# Construye la URL completa
json_url = f"https://black-ashamed-dove-888.mypinata.cloud/ipfs/{json_cid}"

# Encabezados para la autenticación
headers = {
    "pinata_api_key": pinata_api_key,
    "pinata_secret_api_key": pinata_secret_api_key,
}

# Realiza la solicitud GET para obtener el JSON
response = requests.get(json_url, headers=headers)

# Verifica si la solicitud fue exitosa
if response.status_code == 200:
    # Verifica si la respuesta contiene datos antes de intentar analizarla como JSON
    if response.text:
        json_data = response.json()
        print("JSON descargado exitosamente.")
    # Itera a través de los elementos en el JSON
        for item in json_data:
            image_url = f"https://black-ashamed-dove-888.mypinata.cloud/ipfs/{folder_cid}/{item['image']}"
            image_filename = os.path.basename(item['image'])
            print(image_url)
            # Descarga la imagen y la guarda localmente
            image_response = requests.get(image_url)
            if image_response.status_code == 200:
                with open(image_filename, 'wb') as image_file:
                    image_file.write(image_response.content)
                print(f"Imagen descargada: {image_filename}")
            else:
                print(f"No se pudo descargar la imagen. Código de estado: {image_response.status_code}")

    else:
        print("La respuesta está vacía, no se pudo analizar como JSON.")
else:
    print(f"No se pudo descargar el JSON. Código de estado: {response.status_code}")